(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{445:function(t,a,s){"use strict";s.r(a);var e=s(19),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.typescripttutorial.net/typescript-tutorial/what-is-typescript/",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文地址"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在本教程中，你将知道 TypeScript 是什么，以及 TypeScript 对比原生 JavaScript 具备哪些优势。")]),t._v(" "),s("h3",{attrs:{id:"typescript-介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#typescript-介绍"}},[t._v("#")]),t._v(" TypeScript 介绍")]),t._v(" "),s("p",[t._v("TypeScript 是 JavaScript 的超集，它是建立在 JavaScript 之上的一门编程语言。")]),t._v(" "),s("p",[t._v("通过使用 TypeScript 编译器可以把你编写的 TypeScript 代码编译成原生 JavaScript 代码，一旦得到这些原生 JavaScript 代码，你可以把它们部署到任何 JavaScript 可以正常运行的环境中。")]),t._v(" "),s("p",[t._v("JavaScript 文件使用的扩展名是 "),s("code",[t._v(".js")]),t._v(" ，而 TypeScript 文件使用的扩展名是 "),s("code",[t._v(".ts")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cody1991/images@master/typescript-tutorial/what-is-typescript-compiler.51en2uo6cgo0.png",alt:"what-is-typescript-compiler"}})]),t._v(" "),s("p",[t._v("TypeScript 在 JavaScript 语法的基础上，增加了用来支持类型系统的新语法。如果你有一段没有任何语法错误的 JavaScript 程序，那它也是一段 TypeScript 程序，这意味着所有的 JavaScript 程序都是 TypeScript 程序。基于上述原因，把现有的基于 JavaScript 的代码库重构成基于 TypeScript 的代码库会是一件非常容易的事。")]),t._v(" "),s("p",[t._v("下图展示了 TypeScript 和 JavaScript 之间的关系：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/cody1991/images@master/typescript-tutorial/what-is-typescript-typescript-and-js.zaozekhm5bk.png",alt:"what-is-typescript-typescript-and-js"}})]),t._v(" "),s("h3",{attrs:{id:"为什么选择-typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择-typescript"}},[t._v("#")]),t._v(" 为什么选择 TypeScript")]),t._v(" "),s("p",[t._v("TypeScript 主要的目标如下：")]),t._v(" "),s("ul",[s("li",[t._v("向 JavaScript 中注入可选类型；")]),t._v(" "),s("li",[t._v("实现了未来的 JavaScript 计划添加的特性（未来的 JavaScript 指的是 ECMAScript Next 或者 ES Next）。")])]),t._v(" "),s("h4",{attrs:{id:"_1-typescript-帮你避免一些-bug-达到提升工作效率的目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-typescript-帮你避免一些-bug-达到提升工作效率的目的"}},[t._v("#")]),t._v(" 1) TypeScript 帮你避免一些 Bug，达到提升工作效率的目的")]),t._v(" "),s("p",[t._v("类型系统可以帮你避免很多的错误，达到提升工作效率的目的，原因在于使用类型系统的时候，你可以在编译阶段提前捕获到一些 Bug，而不是等到运行时才发现这些问题。")]),t._v(" "),s("p",[t._v("下面的函数将两个数字 x 和 y 进行相加：")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("如果你通过 HTML 的 Input 元素获取到 x 和 y 的值，把它们传递给上述函数，你可能会得到意料之外的结果：")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// result of concatenating strings")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("假设用户输入了 "),s("code",[t._v("10")]),t._v(" 和 "),s("code",[t._v("20")]),t._v("， "),s("code",[t._v("add()")]),t._v(" 函数会返回 "),s("code",[t._v("1020")]),t._v("，而不是期望的 "),s("code",[t._v("30")]),t._v("。产生这种情况的原因是 "),s("code",[t._v("input1.value")]),t._v(" 和 "),s("code",[t._v("input2.value")]),t._v(" 的类型是字符串，而非数字。当你使用操作符 "),s("code",[t._v("+")]),t._v(" 将两个字符串相加的时候，操作符 "),s("code",[t._v("+")]),t._v(" 会把两个字符串连接成一个单独的字符串。")]),t._v(" "),s("p",[t._v("如下所示，当你使用 TypeScript 显式指定参数的类型的时候：")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("在这个函数中，我们给参数增加了数字类型，"),s("code",[t._v("add()")]),t._v(" 函数只能接收数字类型的参数，无法接收其他任何类型的参数，当你调用它的时候：")]),t._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("当想通过 TypeScript 编译器把上面的代码编译成 JavaScript 的时候，TypeScript 编译器会抛出一个错误提示，需要你去进行修改。因此，你可以避免这个错误发生在运行阶段。")]),t._v(" "),s("h4",{attrs:{id:"_2-typescript-把未来的-javascript-带到了今天"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-typescript-把未来的-javascript-带到了今天"}},[t._v("#")]),t._v(" 2) TypeScript 把未来的 JavaScript 带到了今天")]),t._v(" "),s("p",[t._v("TypeScript 给如今的 JavaScript 引擎提供了 ES Next 即将推出的新特性的支持，这意味着你可以在 Web 浏览器（或者其他环境）完全支持这些新特性之前使用它们。")]),t._v(" "),s("p",[t._v("每一年，TC39 都会为 ECMAScript(JavaScript 标准) 发布几个新特性，功能提案一般经历下面五个阶段：")]),t._v(" "),s("ul",[s("li",[t._v("第 0 阶段：最初的想法；")]),t._v(" "),s("li",[t._v("第 1 阶段：提案；")]),t._v(" "),s("li",[t._v("第 2 阶段：草稿；")]),t._v(" "),s("li",[t._v("第 3 阶段：候选；")]),t._v(" "),s("li",[t._v("第 4 阶段：完成。")])]),t._v(" "),s("p",[t._v("TypeScript 通常能支持还在第 3 阶段的特性。")]),t._v(" "),s("blockquote",[s("p",[t._v("关于功能提案可以参考下面这篇文章 "),s("a",{attrs:{href:"https://nitayneeman.com/posts/introducing-all-stages-of-the-tc39-process-in-ecmascript/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript - Introducing All Stages of the TC39 Process"),s("OutboundLink")],1),t._v("。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);